let AlertId = "34e02a45-06b2-76db-0593-e9f94869a160"; // Input AlertId here
let TimeAgo = 30d; // Modify to change date range
let VerboseMode = false; // "true" to show all results, "false" to show only successful results with assosciated TI
let UserList =
    (
    SecurityAlert
    | summarize arg_max(TimeGenerated, *) by SystemAlertId
    | where SystemAlertId == AlertId
    | extend Entities = parse_json(Entities)
    | mv-expand Entities
    | extend DisplayName = Entities.DisplayName
    | summarize UserList = make_set(DisplayName)
    );
let FilteredLogs = union
        SigninLogs,
        AADNonInteractiveUserSignInLogs,
        IdentityInfo,
        ThreatIntelligenceIndicator // Define a new table with union operator
    | where UserPrincipalName in (UserList)
    | extend ResultType = iif(VerboseMode, '', ResultType); // Filter based on UserList
let IPVolumeTI =
    (
    union SigninLogs, AADNonInteractiveUserSignInLogs
    | extend ResultType = iif(VerboseMode, '', ResultType)
    | where UserPrincipalName in(UserList)
    //", High volume of unique IP's: "
    | summarize
        TotalIPs = dcount(IPAddress),
        IPLowVolume = iff((dcount(IPAddress) < 7), tostring(count(IPAddress)), ""),
        DistinctIP = round(dcount(IPAddress) / todouble(dcount(IPAddress)) * 100, 2)
        by UserPrincipalName, IPAddress
    | project-away IPAddress, UserPrincipalName
    );
let LegacyAuthList = dynamic(["Authenticated SMTP", "Autodiscover", "Exchange ActiveSync", "Exchange Online PowerShell", "Exchange Web Services", "IMAP4", "MAPI over HTTP", "Outlook Anywhere", "Outlook Service", "POP3", "Reporting Web Services", "Other clients", "BAV2ROPC"]);
let toCountryCode = (countryName: string) {
    let countryCodes = dynamic({"A1": "Anonymous Proxy", "A2": "Satellite Provider", "AF": "Afghanistan", "AL": "Albania", "DZ": "Algeria", "AS": "American Samoa", "AD": "Andorra", "AO": "Angola", "AI": "Anguilla", "AQ": "Antarctica", "AG": "Antigua and Barbuda", "AR": "Argentina", "AM": "Armenia", "AW": "Aruba", "AP": "Asia/Pacific Region", "AU": "Australia", "AT": "Austria", "AZ": "Azerbaijan", "BS": "Bahamas", "BH": "Bahrain", "BD": "Bangladesh", "BB": "Barbados", "BY": "Belarus", "BE": "Belgium", "BZ": "Belize", "BJ": "Benin", "BM": "Bermuda", "BT": "Bhutan", "BO": "Bolivia", "BA": "Bosnia and Herzegovina", "BW": "Botswana", "BV": "Bouvet Island", "BR": "Brazil", "IO": "British Indian Ocean Territory", "BN": "Brunei Darussalam", "BG": "Bulgaria", "BF": "Burkina Faso", "BI": "Burundi", "KH": "Cambodia", "CM": "Cameroon", "CA": "Canada", "CV": "Cape Verde", "KY": "Cayman Islands", "CF": "Central African Republic", "TD": "Chad", "CL": "Chile", "CN": "China", "CX": "Christmas Island", "CC": "Cocos (Keeling) Islands", "CO": "Colombia", "KM": "Comoros", "CG": "Congo", "CD": "Congo, The Democratic Republic of the", "CK": "Cook Islands", "CR": "Costa Rica", "CI": "Cote d'Ivoire", "HR": "Croatia", "CU": "Cuba", "CY": "Cyprus", "CZ": "Czech Republic", "DK": "Denmark", "DJ": "Djibouti", "DM": "Dominica", "DO": "Dominican Republic", "EC": "Ecuador", "EG": "Egypt", "SV": "El Salvador", "GQ": "Equatorial Guinea", "ER": "Eritrea", "EE": "Estonia", "ET": "Ethiopia", "EU": "Europe", "FK": "Falkland Islands (Malvinas)", "FO": "Faroe Islands", "FJ": "Fiji", "FI": "Finland", "FR": "France", "GF": "French Guiana", "PF": "French Polynesia", "TF": "French Southern Territories", "GA": "Gabon", "GM": "Gambia", "GE": "Georgia", "DE": "Germany", "GG": "Guernsey", "GH": "Ghana", "GI": "Gibraltar", "GR": "Greece", "GL": "Greenland", "GD": "Grenada", "GP": "Guadeloupe", "GU": "Guam", "GT": "Guatemala", "GN": "Guinea", "GW": "Guinea-Bissau", "GY": "Guyana", "HT": "Haiti", "HM": "Heard Island and McDonald Islands", "VA": "Holy See (Vatican City State)", "HN": "Honduras", "HK": "Hong Kong", "HU": "Hungary", "IS": "Iceland", "IM": "Isle of Man", "IN": "India", "ID": "Indonesia", "IR": "Iran, Islamic Republic of", "IQ": "Iraq", "IE": "Ireland", "IL": "Israel", "IT": "Italy", "JE": "Jersey", "JM": "Jamaica", "JP": "Japan", "JO": "Jordan", "KZ": "Kazakhstan", "KE": "Kenya", "KI": "Kiribati", "KP": "Korea, Democratic People's Republic of", "KR": "Korea, Republic of", "KW": "Kuwait", "KG": "Kyrgyzstan", "LA": "Lao People's Democratic Republic", "LV": "Latvia", "LB": "Lebanon", "LS": "Lesotho", "LR": "Liberia", "LY": "Libyan Arab Jamahiriya", "LI": "Liechtenstein", "LT": "Lithuania", "LU": "Luxembourg", "MO": "Macao", "MK": "Macedonia", "MG": "Madagascar", "MW": "Malawi", "MY": "Malaysia", "MV": "Maldives", "ML": "Mali", "MT": "Malta", "MH": "Marshall Islands", "MQ": "Martinique", "MR": "Mauritania", "MU": "Mauritius", "YT": "Mayotte", "MX": "Mexico", "FM": "Micronesia, Federated States of", "MD": "Moldova, Republic of", "MC": "Monaco", "MN": "Mongolia", "ME": "Montenegro", "MS": "Montserrat", "MA": "Morocco", "MZ": "Mozambique", "MM": "Myanmar", "NA": "Namibia", "NR": "Nauru", "NP": "Nepal", "NL": "Netherlands", "AN": "Netherlands Antilles", "NC": "New Caledonia", "NZ": "New Zealand", "NI": "Nicaragua", "NE": "Niger", "NG": "Nigeria", "NU": "Niue", "NF": "Norfolk Island", "MP": "Northern Mariana Islands", "NO": "Norway", "OM": "Oman", "PK": "Pakistan", "PW": "Palau", "PS": "Palestinian Territory", "PA": "Panama", "PG": "Papua New Guinea", "PY": "Paraguay", "PE": "Peru", "PH": "Philippines", "PL": "Poland", "PT": "Portugal", "PR": "Puerto Rico", "QA": "Qatar", "RE": "Reunion", "RO": "Romania", "RU": "Russian Federation", "RW": "Rwanda", "SH": "Saint Helena", "KN": "Saint Kitts and Nevis", "LC": "Saint Lucia", "PM": "Saint Pierre and Miquelon", "VC": "Saint Vincent and the Grenadines", "WS": "Samoa", "SM": "San Marino", "ST": "Sao Tome and Principe", "SA": "Saudi Arabia", "SN": "Senegal", "RS": "Serbia", "SC": "Seychelles", "SL": "Sierra Leone", "SG": "Singapore", "SK": "Slovakia", "SI": "Slovenia", "SB": "Solomon Islands", "SO": "Somalia", "ZA": "South Africa", "GS": "South Georgia and the South Sandwich Islands", "ES": "Spain", "LK": "Sri Lanka", "SD": "Sudan", "SR": "Suriname", "SJ": "Svalbard and Jan Mayen", "SZ": "Swaziland", "SE": "Sweden", "CH": "Switzerland", "SY": "Syrian Arab Republic", "TW": "Taiwan", "TJ": "Tajikistan", "TZ": "Tanzania, United Republic of", "TH": "Thailand", "TG": "Togo", "TK": "Tokelau", "TO": "Tonga", "TT": "Trinidad and Tobago", "TN": "Tunisia", "TR": "Turkey", "TM": "Turkmenistan", "TC": "Turks and Caicos Islands", "TV": "Tuvalu", "UG": "Uganda", "UA": "Ukraine", "AE": "United Arab Emirates", "GB": "United Kingdom", "US": "United States", "UM": "United States Minor Outlying Islands", "UY": "Uruguay", "UZ": "Uzbekistan", "VU": "Vanuatu", "VE": "Venezuela", "VN": "Vietnam", "VG": "Virgin Islands, British", "VI": "Virgin Islands, U.S.", "WF": "Wallis and Futuna", "EH": "Western Sahara", "YE": "Yemen", "ZM": "Zambia", "ZW": "Zimbabwe"});
    tolower(countryCodes[tostring(countryName)])
};
let ParsedData =
    (
    union
        FilteredLogs
    | extend DeviceId = split(coalesce(DeviceDetail_dynamic.deviceId, parse_json(DeviceDetail_string)), '{"deviceId":')[0]
    | extend isDeviceRegistered = iif(
        isnotempty(DeviceId),
        strcat("Device ", DeviceId),
        "The device"
        )
    | extend isDeviceManaged = iif(
        isnotempty(coalesce(DeviceDetail_dynamic.isManaged, parse_json(DeviceDetail_string).isManaged)),
        " is managed ",
        " is unmanaged "
        )
    | extend isDeviceCompliant = iif(
        isnotempty(coalesce(DeviceDetail_dynamic.isCompliant, parse_json(DeviceDetail_string).isCompliant)),
        "and compliant",
        "and non-compliant"
        )
    | extend UserDevice = strcat(isDeviceRegistered, isDeviceManaged, isDeviceCompliant)
    | extend Result = iff(isempty(ResultDescription), "Succeessful sign-in", (iff(ResultDescription == "Other", strcat("Failed sign-in - (", ResultType, ")"), ResultDescription)))
    | extend Method = strcat(
        tostring(parse_json(AuthenticationDetails)[0].authenticationMethodDetail),
        iff(isnotempty(parse_json(AuthenticationDetails)[0].authenticationMethodDetail), ", ", ""),
        tostring(parse_json(AuthenticationDetails)[0].authenticationStepResultDetail)
        )
    | extend User = UserPrincipalName
    | extend ResultDetails = strcat(Result, iff(isempty(Method), "", ", "), Method)
    | extend UABrowser = iff(UserAgent contains "(", url_decode(tostring(split(UserAgent, '/')[0])), "")
    | extend UAOperatingSystem = iff(UserAgent contains "(", url_decode(tostring(split(split(split(UserAgent, ')')[0], '(')[-1], ";")[0])), "")
    | extend UAProduct = iff(UserAgent !contains "(", replace_string(replace_string(tostring(split(split(split(UserAgent, '/')[0], '(')[-1], ";")[0]), "-", " "), "%20", " "), "")
    | extend SourceUserAgent = iff(isempty(UAProduct), strcat(UABrowser, " ", UAOperatingSystem), UAProduct) // Originally utilized parse_user_agent however it was extremely limited in what it would show, filtering all product UA's and would disclude Linux operating systems. Current filters utilize differences in convention to filter between product UA's and browser UA's.
    | summarize
        IPList = make_set(IPAddress),
        LocationList = make_set(Location)
        by
        User,
        UserDevice,
        SourceUserAgent,
        ResultDetails
    | project
        User,
        UserDevice,
        ResultDetails,
        SourceIP = substring(IPList, 1, strlen(IPList) - 2),
        SourceUserAgent,
        SourceLocation = substring(LocationList, 1, strlen(LocationList) - 2)
    | sort by User desc nulls last
    );
let OSINTTI = 
    (
    union
        FilteredLogs,
        ThreatIntelligenceIndicator
    | extend OSINTReports = iff(isempty(Description), "", Description)
    );
let UserAgentTI =
    union
        FilteredLogs,
        ParsedData
    | summarize LegacyAuthenticator = replace_string(replace_string(tostring(strcat((iff(make_set(SourceUserAgent) has_any(LegacyAuthList), strcat("Legacy Authenticator Utilized: ", make_set(SourceUserAgent)), "")), "")), "[", ""), "]", "")
        by
        User,
        UserDevice,
        ResultDetails,
        SourceIP,
        SourceLocation,
        SourceUserAgent
;
let LocationTI =
    union
        FilteredLogs,
        ThreatIntelligenceIndicator,
        ParsedData,
        IdentityInfo
    | summarize AnomalousLocation =replace_string(replace_string(tostring(iff(isnotempty(make_set_if(toCountryCode(Location), toCountryCode(Location) != toCountryCode(Country))), strcat("Anomalous Location: ", tostring(make_set_if(toCountryCode(Location), toCountryCode(Location) != toCountryCode(Country)))), "")), "[", ""), "]", "")
        by        
        UserPrincipalName
;
LocationTI
| join kind=inner UserAgentTI on $left.UserPrincipalName == $right.User;
union FilteredLogs, ParsedData, LocationTI, OSINTTI, UserAgentTI
| where User in (UserList)
| extend IndicatorsOfCompromise = strcat(LegacyAuthenticator, " ", OSINTReports, " ", AnomalousLocation, " ")
| project
    User,
    UserDevice,
    ResultDetails,
    SourceIP,
    SourceLocation,
    SourceUserAgent,
    AnomalousLocation,
    LegacyAuthenticator,
    OSINTReports, 
    IndicatorsOfCompromise





----------------------

//cant have two summarize using the same data no matter what without a join?